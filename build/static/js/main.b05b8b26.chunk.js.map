{"version":3,"sources":["enums/actionTypes.ts","enums/route.ts","helpers/LazyLoader.tsx","pages/main/Main.tsx","App.tsx","reportWebVitals.ts","helpers/objectHelper.ts","reducers/catsReducer.ts","reducers/index.ts","store/index.ts","index.tsx"],"names":["CatsType","BreedsType","AppRoute","LazyLoad","getComponent","AsyncComponent","state","Component","this","then","setState","props","Main","children","CatsPage","module","default","CatDetails","App","exact","path","Home","render","Cats","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","_delete","rawObject","prop","Object","keys","reduce","object","key","_mapKeys","rawArray","newObject","Set","forEach","i","id","initialState","catsReducer","action","type","GET_CAT_BREED","payload","GET_CAT","ADD_CAT","EDIT_CAT","DELETE_CAT","rootReducer","combineReducers","middleWares","thunk","composeEnhancers","compose","Store","createStore","undefined","applyMiddleware","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"qGAAO,IAAKA,EAQAC,EARZ,kC,SAAYD,K,8BAAAA,E,kBAAAA,E,kBAAAA,E,oBAAAA,E,yBAAAA,M,cAQAC,K,uBAAAA,M,2FCRAC,E,uFCkCGC,EAxBE,SAACC,GAAuB,IAC/BC,EAD8B,4MAGhCC,MAAQ,CAAEC,UAAWF,EAAeE,WAHJ,uDAKhC,WAAqB,IAAD,OACXC,KAAKF,MAAMC,WACZH,IAAeK,MAAK,SAACF,GACjBF,EAAeE,UAAYA,EAC3B,EAAKG,SAAS,CAAEH,mBATI,oBAahC,WAAU,IACEA,EAAkCC,KAAKF,MAAvCC,UACR,OAAIA,EACO,cAACA,EAAD,eAAeC,KAAKG,QAExB,SAlBqB,GACPJ,aAoB7B,OApBMF,EACKE,UAAY,KAmBhBF,I,SD/BCH,K,SAAAA,E,cAAAA,M,KECZ,IAQeU,EARQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OACI,mCACKA,K,eCEPC,G,MAAWX,GAAS,kBAAM,mDAA8BM,MAAK,SAAAM,GAAM,OAAIA,EAAOC,eAC9EC,EAAad,GAAS,kBAAM,mDAAqCM,MAAK,SAAAM,GAAM,OAAIA,EAAOC,cAgB9EE,EAdO,WAEpB,OACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAMlB,EAASmB,KAAMC,OAAQ,SAAAX,GAAK,OAAI,cAACM,EAAD,eAAgBN,OACnE,cAAC,IAAD,CAAOS,KAAMlB,EAASqB,KAAMC,UAAWV,YCFlCW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,wCCDDO,EAAU,SAACC,EAAgBC,GAQpC,OAPkBC,OAAOC,KAAKH,GAAWI,QAAO,SAACC,EAAaC,GAI1D,OAHIA,IAAQL,IACRI,EAAOC,GAAON,EAAUM,IAErBD,IACR,KAgBME,EAAW,WAAkC,IAAjCnC,EAAgC,uDAAxB,GAAIoC,EAAoB,uCAG/CC,EAAkB,eAAQrC,GAKhC,OAFA,IAAIsC,IAAIF,GAAUG,SAAQ,SAACC,GAAD,OAAYH,EAAUG,EAAEC,IAAMD,KAEjDH,GClCLK,EAAwB,GAoCfC,EAlCK,WAAwC,IAAvC3C,EAAsC,uDAA9B0C,EAAcE,EAAgB,uCACvD,OAAQA,EAAOC,MAEX,KAAKnD,IAASoD,cACV,OAAO,eACAX,EAAS,eAAKnC,GAAS4C,EAAOG,UAGzC,KAAKrD,IAASsD,QAMd,KAAKtD,IAASuD,QAMd,KAAKvD,IAASwD,SACV,OAAO,2BACAlD,GADP,kBAEK4C,EAAOG,QAAQN,GAAKG,EAAOG,UAGpC,KAAKrD,IAASyD,WACV,OAAOxB,EAAQ3B,EAAO4C,EAAOG,SAEjC,QACI,OAAO/C,ICfJoD,EANKC,YAAgB,CAChCV,gBCeEW,EAAc,CAACC,KAEfC,EAIFC,IAUWC,EANDC,YACVP,OACAQ,EACAJ,EAAiBK,IAAe,WAAf,EAAmBP,KCpCxCQ,IAAS9C,OACP,cAAC,IAAM+C,WAAP,UACE,cAAC,IAAD,CAAUC,MAAON,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1B/C,M","file":"static/js/main.b05b8b26.chunk.js","sourcesContent":["export enum CatsType {\r\n    GET_CAT_BREED = \"GET_CAT_BREED\",\r\n    GET_CAT = \"GET_CAT\",\r\n    ADD_CAT = \"ADD_CAT\",\r\n    EDIT_CAT = \"EDIT_CAT\",\r\n    DELETE_CAT = \"DELETE_CAT\"\r\n}\r\n\r\nexport enum BreedsType {\r\n    GET_BREED = \"GET_BREED\"\r\n}","export enum AppRoute {\r\n    Home = '/',\r\n    Cats = '/cats'\r\n}","import { Component } from \"react\"\r\n\r\n/**\r\n * =================================================================\r\n * @description - This will help in code splitting by lazy loading \r\n * imported components\r\n * @param getComponent - typeof function \r\n * @returns HOC\r\n * =================================================================\r\n */\r\nconst LazyLoad = (getComponent: any) => {\r\n    class AsyncComponent extends Component {\r\n        static Component = null;\r\n        state = { Component: AsyncComponent.Component };\r\n\r\n        componentDidMount() {\r\n            if (!this.state.Component) {\r\n                getComponent().then((Component: any) => {\r\n                    AsyncComponent.Component = Component\r\n                    this.setState({ Component })\r\n                })\r\n            }\r\n        }\r\n        render() {\r\n            const { Component }: { Component: any } = this.state\r\n            if (Component) {\r\n                return <Component {...this.props} />\r\n            }\r\n            return null\r\n        }\r\n    }\r\n    return AsyncComponent;\r\n}\r\n\r\nexport default LazyLoad","\r\nconst Main: React.FC = ({ children }) => {\r\n    return (\r\n        <>\r\n            {children}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main","import LazyLoad from 'helpers/LazyLoader'\nimport { AppRoute } from 'enums/route'\nimport Main from 'pages/main/Main'\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\nimport './App.css'\n\nconst CatsPage = LazyLoad(() => import('pages/cats/CatsPage').then(module => module.default))\nconst CatDetails = LazyLoad(() => import('components/cats/CatDetails').then(module => module.default))\n\nconst App: React.FC = () => {\n\n  return (\n    <Main>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path={AppRoute.Home} render={props => <CatDetails {...props} />} />\n          <Route path={AppRoute.Cats} component={CatsPage} />\n        </Switch>\n      </BrowserRouter>\n    </Main>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Cat, CatList } from 'interfaces/cat'\r\n\r\n/**\r\n * ===============================================================================\r\n * @param {...rest} rawObject \r\n * @param {string} prop \r\n * ===============================================================================\r\n */\r\nexport const _delete = (rawObject: any, prop: string) => {\r\n    const newObject = Object.keys(rawObject).reduce((object: any, key: string) => {\r\n        if (key !== prop) {\r\n            object[key] = rawObject[key]\r\n        }\r\n        return object\r\n    }, {})\r\n\r\n    return newObject\r\n}\r\n// ===============================================================================\r\n\r\n\r\n/**\r\n * ===============================================================================\r\n * @description - This maps the array and convert it into an object and uses the\r\n * item ID as the object key and the item as the object value\r\n * @param rawArray - typeof Array\r\n * @param state - typeof Object\r\n * @return { [key: string]: Cat }\r\n * ===============================================================================\r\n */\r\nexport const _mapKeys = (state = {}, rawArray: Cat[]) => {\r\n\r\n    // copies the current app state\r\n    const newObject: CatList = { ...state };\r\n\r\n    // Overwrites any existing object or add a new one\r\n    new Set(rawArray).forEach((i: Cat) => newObject[i.id] = i)\r\n\r\n    return newObject\r\n}\r\n// ===============================================================================","import { CatsType } from 'enums/actionTypes'\r\nimport { _delete, _mapKeys } from 'helpers/objectHelper'\r\nimport { CatList } from 'interfaces/cat'\r\n\r\nconst initialState: CatList = {}\r\n\r\nconst catsReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n\r\n        case CatsType.GET_CAT_BREED:\r\n            return {\r\n                ..._mapKeys({ ...state }, action.payload)\r\n            }\r\n\r\n        case CatsType.GET_CAT:\r\n            return {\r\n                ...state,\r\n                [action.payload.id]: action.payload\r\n            }\r\n\r\n        case CatsType.ADD_CAT:\r\n            return {\r\n                ...state,\r\n                [action.payload.id]: action.payload\r\n            }\r\n\r\n        case CatsType.EDIT_CAT:\r\n            return {\r\n                ...state,\r\n                [action.payload.id]: action.payload\r\n            }\r\n\r\n        case CatsType.DELETE_CAT:\r\n            return _delete(state, action.payload)\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default catsReducer","/**\r\n* ====================================================================\r\n* @description Main reducer file that contains imported reducers\r\n* @returns root reducer\r\n* ====================================================================\r\n*/\r\n\r\n\r\n/** IMPORT DEPENDENCIES */\r\nimport { combineReducers } from 'redux'\r\n\r\n\r\n/** IMPORT REDUCERS */\r\nimport catsReducer from 'reducers/catsReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    catsReducer\r\n})\r\n\r\n\r\n\r\nexport default rootReducer","/**\r\n * ====================================================================\r\n * @description The single source of truth in react state management\r\n * @returns redux store\r\n * ====================================================================\r\n */\r\n\r\n\r\n/** IMPORT LIBRARIES */\r\nimport { createStore, applyMiddleware, compose } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport rootReducer from \"reducers\"\r\n\r\n\r\n/**\r\n * ==============================================================================\r\n * @todo - Look for a way to bootstrap env variable and use it on build process\r\n * @option1 - env-cmd\r\n * ==============================================================================\r\n */\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\n//Toggle switch for Redux dev tool\r\nlet enviroment = process.env.NODE_ENV || 'development' // empty string '' will disable the devtool\r\n\r\n\r\nconst middleWares = [thunk]\r\n\r\nconst composeEnhancers =\r\n    (enviroment === 'development' &&\r\n        // eslint-disable-next-line dot-notation\r\n        (window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose)) ||\r\n    compose;\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nconst Store = createStore(\r\n    rootReducer,\r\n    undefined,\r\n    composeEnhancers(applyMiddleware(...middleWares))\r\n)\r\n\r\nexport default Store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport Store from 'store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={Store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}