{"version":3,"sources":["config/keys.ts","api/catApi.ts","components/common/Notification.tsx","components/cats/CatDetails.tsx","actions/catsAction.ts"],"names":["config","catApiKey","process","API_KEY","catAPI","axios","create","baseURL","headers","Notification","props","children","position","delay","title","useState","show","setShow","ToastContainer","className","Toast","onClose","autohide","Header","src","alt","Body","CatDetails","initialCatState","useMemo","id","url","cat","setCat","cats","useSelector","state","catsReducer","dispatch","useDispatch","useEffect","a","get","data","type","CatsType","GET_CAT","payload","height","width","breeds","name"],"mappings":"kKAIeA,EAJA,CACXC,UAAWC,mIAAYC,SCeZC,EAPAC,IAAMC,OAAO,CACxBC,QAAQ,6BAAD,OAHK,MAIZC,QAAS,CACL,YAAaR,EAAOC,a,sCCuBbQ,EA9BkC,SAACC,GAA6B,IACnEC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,SAAUC,EAAiBH,EAAjBG,MAAOC,EAAUJ,EAAVI,MADuC,EAElDC,oBAAS,GAFyC,mBAEnEC,EAFmE,KAE7DC,EAF6D,KAI1E,OACI,cAACC,EAAA,EAAD,CACIC,UAAU,MACVP,SAAQ,OAAEA,QAAF,IAAEA,IAAY,YAF1B,SAII,eAACQ,EAAA,EAAD,CACIJ,KAAMA,EACNK,QAAS,kBAAMJ,GAASD,IACxBH,MAAK,OAAEA,QAAF,IAAEA,IAAS,IAChBS,UAAQ,EAJZ,UAMI,eAACF,EAAA,EAAMG,OAAP,WACI,qBACIC,IAAI,2BACJL,UAAU,eACVM,IAAI,KAER,wBAAQN,UAAU,UAAlB,SAA6BL,IAC7B,mDAEJ,cAACM,EAAA,EAAMM,KAAP,UAAaf,U,QCkBdgB,UAtCmC,SAACjB,GAAgC,IAAD,IAExEkB,EAAuBC,mBAAQ,iBAAO,CAAEC,GAAI,GAAIC,IAAK,MAAO,IAFY,EAIxDhB,mBAAca,GAJ0C,mBAIvEI,EAJuE,KAIlEC,EAJkE,KAKxEC,EAAOC,aAA+B,SAAAC,GAAK,OAAIA,EAAMC,eACrDC,EAAWC,cAuBjB,OAbAC,qBAAU,WCCQ,IAACV,EDAXI,EAAK,cACLD,EAAOC,EAAK,cAGXA,EAAK,cACNI,GCLWR,EDKK,YCLN,uCAAgB,WAAOQ,GAAP,iBAAAG,EAAA,sEAEIrC,EAAOsC,IAAP,kBAAsBZ,IAF1B,uBAE1Ba,EAF0B,EAE1BA,KAF0B,kBAK9BL,EAAS,CACLM,KAAMC,IAASC,QACfC,QAASJ,KAPiB,2CAAhB,0DDQf,CAACL,EAAUJ,IAKV,sBAAKf,UAAU,MAAf,UACI,cAAC,EAAD,IACA,qBAAKK,IAAG,OAAEQ,QAAF,IAAEA,OAAF,EAAEA,EAAKD,IAAKiB,OAAQ,MAAOC,MAAO,MAAOxB,IAAI,QAFzD,OAGKO,QAHL,IAGKA,GAHL,UAGKA,EAAKkB,cAHV,iBAGK,EAAc,UAHnB,aAGK,EAAkBC","file":"static/js/5.12fffc0a.chunk.js","sourcesContent":["const config = {\r\n    catApiKey: process.env.API_KEY\r\n}\r\n\r\nexport default config","import axios from 'axios'\r\nimport config from '../config/keys'\r\n\r\n/**\r\n * @description - This will also serve as an interceptor for all catapi endpoints\r\n */\r\n\r\nconst version = 'v1'\r\n\r\nconst catAPI = axios.create({\r\n    baseURL: `https://api.thecatapi.com/${version}`,\r\n    headers: {\r\n        'x-api-key': config.catApiKey\r\n    }\r\n})\r\n\r\nexport default catAPI","import { NotificationType } from 'interfaces/notification'\r\nimport React, { useState } from 'react'\r\nimport { Toast, ToastContainer } from 'react-bootstrap'\r\n\r\n\r\nconst Notification: React.FC<NotificationType> = (props: NotificationType) => {\r\n    const { children, position, delay, title } = props\r\n    const [show, setShow] = useState(true)\r\n\r\n    return (\r\n        <ToastContainer\r\n            className=\"p-3\"\r\n            position={position ?? 'top-start'}\r\n        >\r\n            <Toast\r\n                show={show}\r\n                onClose={() => setShow(!show)}\r\n                delay={delay ?? 3000}\r\n                autohide\r\n            >\r\n                <Toast.Header>\r\n                    <img\r\n                        src=\"holder.js/20x20?text=%20\"\r\n                        className=\"rounded me-2\"\r\n                        alt=\"\"\r\n                    />\r\n                    <strong className=\"me-auto\">{title}</strong>\r\n                    <small>11 mins ago</small>\r\n                </Toast.Header>\r\n                <Toast.Body>{children}</Toast.Body>\r\n            </Toast>\r\n        </ToastContainer>\r\n    )\r\n}\r\n\r\nexport default Notification","import { getCat } from 'actions'\r\nimport Notification from 'components/common/Notification'\r\nimport { Cat, CatList } from 'interfaces/cat'\r\nimport React, { useEffect, useMemo, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { AppState } from 'store'\r\n\r\n\r\nconst CatDetails: React.FC<RouteComponentProps> = (props: RouteComponentProps) => {\r\n\r\n    const initialCatState: Cat = useMemo(() => ({ id: '', url: '' }), [])\r\n\r\n    const [cat, setCat] = useState<Cat>(initialCatState)\r\n    const cats = useSelector<AppState, CatList>(state => state.catsReducer)\r\n    const dispatch = useDispatch()\r\n\r\n    /**\r\n     * =======================================================================\r\n     * @description - This block will solve if the single view should call\r\n     * the api endpoint or not without adding complexity in the action types\r\n     * inside the reducer\r\n     * =======================================================================\r\n     */\r\n\r\n    useEffect(() => {\r\n        if (cats['h19-vtIeX']) {\r\n            setCat(cats['h19-vtIeX'])\r\n        }\r\n\r\n        if (!cats['h19-vtIeX']) {\r\n            dispatch(getCat('h19-vtIeX'))\r\n        }\r\n\r\n    }, [dispatch, cats])\r\n\r\n    /** ===================================================================== */\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Notification />\r\n            <img src={cat?.url} height={'50%'} width={'50%'} alt=\"Cat\" />\r\n            {cat?.breeds?.[0]?.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CatDetails","import catAPI from 'api/catApi'\r\nimport { AxiosResponse } from 'axios'\r\nimport { CatsType } from 'enums/actionTypes'\r\nimport { SearchParamsType } from 'interfaces/searchParams'\r\n\r\n\r\nexport const getCatBreed = (params: SearchParamsType) => async (dispatch: any) => {\r\n\r\n    const { id, page, limit } = params\r\n    try {\r\n        const { data }: AxiosResponse = await catAPI.get(\r\n            `/images/search?page=${page ?? 1}&limit=${limit ?? 10}&breed_id=${id}`\r\n        )\r\n\r\n        return (\r\n            dispatch({\r\n                type: CatsType.GET_CAT_BREED,\r\n                payload: data\r\n            })\r\n        )\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const getCat = (id: string) => async (dispatch: any) => {\r\n\r\n    const { data }: AxiosResponse = await catAPI.get(`/images/${id}`)\r\n\r\n    return (\r\n        dispatch({\r\n            type: CatsType.GET_CAT,\r\n            payload: data\r\n        })\r\n    )\r\n}"],"sourceRoot":""}